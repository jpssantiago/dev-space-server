// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String   @id @default(cuid())
  username    String   @unique
  email       String   @unique
  password    String
  name        String
  avatar      String?
  description String?
  createdAt   DateTime @default(now())

  posts Post[]

  likes Like[]

  following Follow[] @relation("following")
  followers Follow[] @relation("followed")

  activities Activity[] @relation("activities")
  sentActivities Activity[]
}

model Post {
  id        String   @id @default(cuid())
  text      String?  @db.VarChar(2200)
  files     String[]
  createdAt DateTime @default(now())

  author   User   @relation(fields: [authorId], references: [id])
  authorId String

  likes         Like[]

  parentPost   Post?   @relation("parentPost", fields: [parentPostId], references: [id], onDelete: Cascade)
  parentPostId String?
  replies      Post[]  @relation("parentPost")

  activities Activity[]
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  user   User   @relation(fields: [userId], references: [id])
  userId String

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String
}

model Follow {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  following   User   @relation("following", fields: [followingId], references: [id])
  followingId String

  followed   User   @relation("followed", fields: [followedId], references: [id])
  followedId String
}

enum ActivityType {
  LIKE_POST
  LIKE_REPLY
  FOLLOW
  REPLY
}

model Activity {
  id String @id @default(cuid())
  type ActivityType
  hasBeenRead Boolean @default(false)
  createdAt DateTime @default(now())

  user User @relation("activities", fields: [userId], references: [id])
  userId String

  post Post? @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId String?

  sender User? @relation(fields: [senderId], references: [id])
  senderId String?
}